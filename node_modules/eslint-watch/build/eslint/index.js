"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _parser = _interopRequireDefault(require("./parser"));

var _logger = _interopRequireDefault(require("../logger"));

var _execa = _interopRequireDefault(require("execa"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

const eslint = {
  async getHelpOptions() {
    const helpText = await eslint.execute(['--help'], {
      color: false
    });
    return _parser.default.parseHelp(helpText);
  },

  async execute(args = [], cliOptions = {}) {
    const logger = _logger.default.createLogger('eslint');

    logger.debug('Executing %o', args);
    const env = cliOptions.color ? {
      FORCE_COLOR: cliOptions.color
    } : {};

    try {
      const result = await (0, _execa.default)('eslint', args, {
        env: _objectSpread({}, process.env, {}, env)
      });
      logger.debug(result);
      return result.stdout;
    } catch (error) {
      logger.debug(error);

      if (error.errno === 'ENOENT' && error.path === 'eslint') {
        throw new Error("Error: Eslint was not found either globally or locally.\nRun 'npm i -g eslint' or 'npm i -D eslint' to resolve the issue.");
      }

      throw new Error(error.stdout || error.stderr);
    }
  },

  async lint(args = [], cliOpts = {}) {
    const logger = _logger.default.createLogger('eslint');

    try {
      let endLine = '';
      const results = await eslint.execute(args, cliOpts);

      if (!results.trim()) {
        if (!cliOpts.quiet) {
          logger.log(`âœ“ Clean (${new Date().toLocaleTimeString()})`);
        }

        return;
      }

      if (!/\\n{2}$/.test(results)) {
        endLine = '\n';
      }

      logger.log(`${results}${endLine}`);
    } catch (error) {
      logger.error(error.message.trim());
    }
  }

};
var _default = eslint;
exports.default = _default;
module.exports = exports.default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9lc2xpbnQvaW5kZXguanMiXSwibmFtZXMiOlsiZXNsaW50IiwiZ2V0SGVscE9wdGlvbnMiLCJoZWxwVGV4dCIsImV4ZWN1dGUiLCJjb2xvciIsInBhcnNlciIsInBhcnNlSGVscCIsImFyZ3MiLCJjbGlPcHRpb25zIiwibG9nZ2VyIiwiTG9nZ2VyIiwiY3JlYXRlTG9nZ2VyIiwiZGVidWciLCJlbnYiLCJGT1JDRV9DT0xPUiIsInJlc3VsdCIsInByb2Nlc3MiLCJzdGRvdXQiLCJlcnJvciIsImVycm5vIiwicGF0aCIsIkVycm9yIiwic3RkZXJyIiwibGludCIsImNsaU9wdHMiLCJlbmRMaW5lIiwicmVzdWx0cyIsInRyaW0iLCJxdWlldCIsImxvZyIsIkRhdGUiLCJ0b0xvY2FsZVRpbWVTdHJpbmciLCJ0ZXN0IiwibWVzc2FnZSJdLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUFBOztBQUNBOztBQUNBOzs7Ozs7Ozs7O0FBRUEsTUFBTUEsTUFBTSxHQUFHO0FBQ2IsUUFBTUMsY0FBTixHQUF1QjtBQUNyQixVQUFNQyxRQUFRLEdBQUcsTUFBTUYsTUFBTSxDQUFDRyxPQUFQLENBQWUsQ0FBQyxRQUFELENBQWYsRUFBMkI7QUFBRUMsTUFBQUEsS0FBSyxFQUFFO0FBQVQsS0FBM0IsQ0FBdkI7QUFFQSxXQUFPQyxnQkFBT0MsU0FBUCxDQUFpQkosUUFBakIsQ0FBUDtBQUNELEdBTFk7O0FBTWIsUUFBTUMsT0FBTixDQUFjSSxJQUFJLEdBQUcsRUFBckIsRUFBeUJDLFVBQVUsR0FBRyxFQUF0QyxFQUEwQztBQUN4QyxVQUFNQyxNQUFNLEdBQUdDLGdCQUFPQyxZQUFQLENBQW9CLFFBQXBCLENBQWY7O0FBRUFGLElBQUFBLE1BQU0sQ0FBQ0csS0FBUCxDQUFhLGNBQWIsRUFBNkJMLElBQTdCO0FBRUEsVUFBTU0sR0FBRyxHQUFHTCxVQUFVLENBQUNKLEtBQVgsR0FBbUI7QUFBRVUsTUFBQUEsV0FBVyxFQUFFTixVQUFVLENBQUNKO0FBQTFCLEtBQW5CLEdBQXVELEVBQW5FOztBQUVBLFFBQUk7QUFDRixZQUFNVyxNQUFNLEdBQUcsTUFBTSxvQkFBTSxRQUFOLEVBQWdCUixJQUFoQixFQUFzQjtBQUFFTSxRQUFBQSxHQUFHLG9CQUFPRyxPQUFPLENBQUNILEdBQWYsTUFBdUJBLEdBQXZCO0FBQUwsT0FBdEIsQ0FBckI7QUFFQUosTUFBQUEsTUFBTSxDQUFDRyxLQUFQLENBQWFHLE1BQWI7QUFFQSxhQUFPQSxNQUFNLENBQUNFLE1BQWQ7QUFDRCxLQU5ELENBTUUsT0FBT0MsS0FBUCxFQUFjO0FBQ2RULE1BQUFBLE1BQU0sQ0FBQ0csS0FBUCxDQUFhTSxLQUFiOztBQUVBLFVBQUlBLEtBQUssQ0FBQ0MsS0FBTixLQUFnQixRQUFoQixJQUE0QkQsS0FBSyxDQUFDRSxJQUFOLEtBQWUsUUFBL0MsRUFBeUQ7QUFDdkQsY0FBTSxJQUFJQyxLQUFKLENBQVUsMkhBQVYsQ0FBTjtBQUNEOztBQUVELFlBQU0sSUFBSUEsS0FBSixDQUFVSCxLQUFLLENBQUNELE1BQU4sSUFBZ0JDLEtBQUssQ0FBQ0ksTUFBaEMsQ0FBTjtBQUNEO0FBQ0YsR0E1Qlk7O0FBNkJiLFFBQU1DLElBQU4sQ0FBV2hCLElBQUksR0FBRyxFQUFsQixFQUFzQmlCLE9BQU8sR0FBRyxFQUFoQyxFQUFvQztBQUNsQyxVQUFNZixNQUFNLEdBQUdDLGdCQUFPQyxZQUFQLENBQW9CLFFBQXBCLENBQWY7O0FBRUEsUUFBSTtBQUNGLFVBQUljLE9BQU8sR0FBRyxFQUFkO0FBQ0EsWUFBTUMsT0FBTyxHQUFHLE1BQU0xQixNQUFNLENBQUNHLE9BQVAsQ0FBZUksSUFBZixFQUFxQmlCLE9BQXJCLENBQXRCOztBQUVBLFVBQUksQ0FBQ0UsT0FBTyxDQUFDQyxJQUFSLEVBQUwsRUFBcUI7QUFDbkIsWUFBSSxDQUFDSCxPQUFPLENBQUNJLEtBQWIsRUFBb0I7QUFDbEJuQixVQUFBQSxNQUFNLENBQUNvQixHQUFQLENBQVksWUFBVyxJQUFJQyxJQUFKLEdBQVdDLGtCQUFYLEVBQWdDLEdBQXZEO0FBQ0Q7O0FBQ0Q7QUFDRDs7QUFFRCxVQUFJLENBQUMsVUFBVUMsSUFBVixDQUFlTixPQUFmLENBQUwsRUFBOEI7QUFDNUJELFFBQUFBLE9BQU8sR0FBRyxJQUFWO0FBQ0Q7O0FBRURoQixNQUFBQSxNQUFNLENBQUNvQixHQUFQLENBQVksR0FBRUgsT0FBUSxHQUFFRCxPQUFRLEVBQWhDO0FBQ0QsS0FoQkQsQ0FnQkUsT0FBT1AsS0FBUCxFQUFjO0FBQ2RULE1BQUFBLE1BQU0sQ0FBQ1MsS0FBUCxDQUFhQSxLQUFLLENBQUNlLE9BQU4sQ0FBY04sSUFBZCxFQUFiO0FBQ0Q7QUFDRjs7QUFuRFksQ0FBZjtlQXNEZTNCLE0iLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgcGFyc2VyIGZyb20gJy4vcGFyc2VyJztcbmltcG9ydCBMb2dnZXIgZnJvbSAnLi4vbG9nZ2VyJztcbmltcG9ydCBleGVjYSBmcm9tICdleGVjYSc7XG5cbmNvbnN0IGVzbGludCA9IHtcbiAgYXN5bmMgZ2V0SGVscE9wdGlvbnMoKSB7XG4gICAgY29uc3QgaGVscFRleHQgPSBhd2FpdCBlc2xpbnQuZXhlY3V0ZShbJy0taGVscCddLCB7IGNvbG9yOiBmYWxzZSB9KTtcblxuICAgIHJldHVybiBwYXJzZXIucGFyc2VIZWxwKGhlbHBUZXh0KTtcbiAgfSxcbiAgYXN5bmMgZXhlY3V0ZShhcmdzID0gW10sIGNsaU9wdGlvbnMgPSB7fSkge1xuICAgIGNvbnN0IGxvZ2dlciA9IExvZ2dlci5jcmVhdGVMb2dnZXIoJ2VzbGludCcpO1xuXG4gICAgbG9nZ2VyLmRlYnVnKCdFeGVjdXRpbmcgJW8nLCBhcmdzKTtcblxuICAgIGNvbnN0IGVudiA9IGNsaU9wdGlvbnMuY29sb3IgPyB7IEZPUkNFX0NPTE9SOiBjbGlPcHRpb25zLmNvbG9yIH0gOiB7fTtcblxuICAgIHRyeSB7XG4gICAgICBjb25zdCByZXN1bHQgPSBhd2FpdCBleGVjYSgnZXNsaW50JywgYXJncywgeyBlbnY6IHsgLi4ucHJvY2Vzcy5lbnYsIC4uLmVudiB9IH0pO1xuXG4gICAgICBsb2dnZXIuZGVidWcocmVzdWx0KTtcblxuICAgICAgcmV0dXJuIHJlc3VsdC5zdGRvdXQ7XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIGxvZ2dlci5kZWJ1ZyhlcnJvcik7XG5cbiAgICAgIGlmIChlcnJvci5lcnJubyA9PT0gJ0VOT0VOVCcgJiYgZXJyb3IucGF0aCA9PT0gJ2VzbGludCcpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiRXJyb3I6IEVzbGludCB3YXMgbm90IGZvdW5kIGVpdGhlciBnbG9iYWxseSBvciBsb2NhbGx5LlxcblJ1biAnbnBtIGkgLWcgZXNsaW50JyBvciAnbnBtIGkgLUQgZXNsaW50JyB0byByZXNvbHZlIHRoZSBpc3N1ZS5cIik7XG4gICAgICB9XG5cbiAgICAgIHRocm93IG5ldyBFcnJvcihlcnJvci5zdGRvdXQgfHwgZXJyb3Iuc3RkZXJyKTtcbiAgICB9XG4gIH0sXG4gIGFzeW5jIGxpbnQoYXJncyA9IFtdLCBjbGlPcHRzID0ge30pIHtcbiAgICBjb25zdCBsb2dnZXIgPSBMb2dnZXIuY3JlYXRlTG9nZ2VyKCdlc2xpbnQnKTtcblxuICAgIHRyeSB7XG4gICAgICBsZXQgZW5kTGluZSA9ICcnO1xuICAgICAgY29uc3QgcmVzdWx0cyA9IGF3YWl0IGVzbGludC5leGVjdXRlKGFyZ3MsIGNsaU9wdHMpO1xuXG4gICAgICBpZiAoIXJlc3VsdHMudHJpbSgpKSB7XG4gICAgICAgIGlmICghY2xpT3B0cy5xdWlldCkge1xuICAgICAgICAgIGxvZ2dlci5sb2coYOKckyBDbGVhbiAoJHtuZXcgRGF0ZSgpLnRvTG9jYWxlVGltZVN0cmluZygpfSlgKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGlmICghL1xcXFxuezJ9JC8udGVzdChyZXN1bHRzKSkge1xuICAgICAgICBlbmRMaW5lID0gJ1xcbic7XG4gICAgICB9XG5cbiAgICAgIGxvZ2dlci5sb2coYCR7cmVzdWx0c30ke2VuZExpbmV9YCk7XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIGxvZ2dlci5lcnJvcihlcnJvci5tZXNzYWdlLnRyaW0oKSk7XG4gICAgfVxuICB9LFxufTtcblxuZXhwb3J0IGRlZmF1bHQgZXNsaW50O1xuIl19